@use 'sass:list';
@use 'sass:map';
@use 'sass:meta';
@use '../config';
@use '../functions';
@use 'media-queries';

@mixin _theme(
  $selector: '.',
  $separator: '-',
  $prefix: null,
  $set: null,
  $rules: null,
  $variant: null,
  $pseudo: null,
  $negative: null,
  $important: null,
  $pseudo-separator: null,
  $variant-separator: null
) {
  $negative-prefix: if($negative, '-', null);

  @each $selector-name, $declaration in $rules {
    @each $set-key, $set-value in $set {
      #{$selector}#{$variant}#{$variant-separator}#{$negative-prefix}#{$prefix}#{$selector-name}#{$separator}#{$set-key}#{$pseudo-separator}#{$pseudo} {
        @each $property in $declaration {
          #{$property}: #{$negative-prefix}#{meta.inspect($set-value)}
            #{if($important, !important, null)};
        }
      }
    }
  }
}

@mixin generate-theme(
  $prefix: map.get(config.$core, 'prefix'),
  $important: map.get(config.$core, 'important'),
  $variant-separator: map.get(config.$core, 'separator'),
  $breakpoints: map.get(config.$theme, 'breakpoints'),
  $pseudo-separator: ':',
  $pseudo: null,
  $set: null,
  $rules: null,
  $positive: true,
  $negative: false,
  $defaults: normal responsive,
  $variants: null,
  $utilities: true
) {
  @if $utilities {
    $defaults-normal: list.index($defaults, 'normal');
    $defaults-responsive: list.index($defaults, 'responsive');

    $responsive: list.index($variants, 'responsive');
    $variants-list: if(
      $responsive,
      functions.remove-value($variants, 'responsive'),
      $variants
    );

    @if $positive {
      @if $defaults-normal {
        @include _theme(
          $set: $set,
          $rules: $rules,
          $prefix: $prefix,
          $important: $important
        );
      }

      @if $variants {
        @each $variant in $variants-list {
          @include _theme(
            $set: $set,
            $rules: $rules,
            $prefix: $prefix,
            $variant: $variant,
            $variant-separator: $variant-separator,
            $pseudo-separator: $pseudo-separator,
            $pseudo: $variant,
            $important: $important
          );
        }
      }
    }

    @if $negative {
      @if $defaults-normal {
        @include _theme(
          $set: $set,
          $rules: $rules,
          $prefix: $prefix,
          $negative: $negative,
          $important: $important
        );
      }

      @if $variants {
        @each $variant in $variants-list {
          @include _theme(
            $set: $set,
            $rules: $rules,
            $prefix: $prefix,
            $negative: $negative,
            $variant: $variant,
            $variant-separator: $variant-separator,
            $pseudo-separator: $pseudo-separator,
            $pseudo: $variant,
            $important: $important
          );
        }
      }
    }

    @if $responsive {
      @each $breakpoint in map.keys($breakpoints) {
        @include media-queries.media($from: $breakpoint) {
          @if $positive {
            @if $defaults-responsive {
              @include _theme(
                $set: $set,
                $rules: $rules,
                $prefix: $prefix,
                $variant: $breakpoint,
                $variant-separator: $variant-separator,
                $important: $important
              );
            }

            @if $variants {
              @each $variant in $variants-list {
                @include _theme(
                  $set: $set,
                  $rules: $rules,
                  $prefix: $prefix,
                  $variant: #{$breakpoint}#{$variant-separator}#{$variant},
                  $variant-separator: $variant-separator,
                  $pseudo-separator: $pseudo-separator,
                  $pseudo: $variant,
                  $important: $important
                );
              }
            }
          }

          @if $negative {
            @if $defaults-responsive {
              @include _theme(
                $set: $set,
                $rules: $rules,
                $prefix: $prefix,
                $negative: $negative,
                $variant: $breakpoint,
                $variant-separator: $variant-separator,
                $important: $important
              );
            }

            @if $variants {
              @each $variant in $variants-list {
                @include _theme(
                  $set: $set,
                  $rules: $rules,
                  $prefix: $prefix,
                  $negative: $negative,
                  $variant: #{$breakpoint}#{$variant-separator}#{$variant},
                  $variant-separator: $variant-separator,
                  $pseudo-separator: $pseudo-separator,
                  $pseudo: $variant,
                  $important: $important
                );
              }
            }
          }
        }
      }
    }
  }
}
