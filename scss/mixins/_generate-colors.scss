@use 'sass:list';
@use 'sass:map';
@use 'sass:meta';
@use '../config';
@use '../functions';
@use 'media-queries';

@mixin _colors(
  $selector: '.',
  $separator: '-',
  $prefix: null,
  $set: null,
  $rules: null,
  $custom-property: null,
  $variant: null,
  $pseudo: null,
  $important: null,
  $variant-separator: null,
  $pseudo-separator: null
) {
  @each $selector-name, $declaration in $rules {
    #{$selector}#{$selector-name} {
      @each $set-key, $set-value in $set {
        @if meta.type-of($set-value) == 'map' {
          @each $key, $value in $set-value {
            @at-root #{$selector}#{$variant}#{$variant-separator}#{$prefix}#{$selector-name}#{$separator}#{$set-key}#{$separator}#{$key}#{$pseudo-separator}#{$pseudo} {
              @if meta.type-of($value) == 'color' {
                @if $custom-property {
                  #{$custom-property}: 1;
                }

                @each $property in $declaration {
                  #{$property}: #{if(
                      $custom-property,
                      rgba($value, var(#{$custom-property})),
                      $value
                    )}
                    #{if($important, !important, null)};
                }
              } @else {
                @each $property in $declaration {
                  #{$property}: #{$value} #{if($important, !important, null)};
                }
              }
            }
          }
        } @else {
          @at-root #{$selector}#{$variant}#{$variant-separator}#{$prefix}#{$selector-name}#{$separator}#{$set-key}#{$pseudo-separator}#{$pseudo} {
            @if meta.type-of($set-value) == 'color' {
              @if $custom-property {
                #{$custom-property}: 1;
              }

              @each $property in $declaration {
                #{$property}: #{if(
                    $custom-property,
                    rgba($set-value, var(#{$custom-property})),
                    $set-value
                  )}
                  #{if($important, !important, null)};
              }
            } @else {
              @each $property in $declaration {
                #{$property}: #{$set-value} #{if($important, !important, null)};
              }
            }
          }
        }
      }
    }
  }
}

@mixin generate-colors(
  $prefix: map.get(config.$core, 'prefix'),
  $important: map.get(config.$core, 'important'),
  $variant-separator: map.get(config.$core, 'separator'),
  $breakpoints: map.get(config.$theme, 'breakpoints'),
  $set: map.get(config.$theme, 'colors'),
  $pseudo-separator: ':',
  $rules: null,
  $custom-property: null,
  $variants: null,
  $pseudo: null,
  $default: true,
  $utilities: true
) {
  @if $utilities {
    $responsive: list.index($variants, 'responsive');
    $variants-type: meta.type-of($variants) ==
      'string' or
      meta.type-of($variants) ==
      'list';
    $variants-list: if(
      $responsive,
      functions.remove-value($variants, 'responsive'),
      $variants
    );

    @if $default {
      @include _colors(
        $set: $set,
        $rules: $rules,
        $prefix: $prefix,
        $custom-property: $custom-property,
        $important: $important
      );
    }

    @if $variants-type {
      @each $variant in $variants-list {
        @include _colors(
          $set: $set,
          $rules: $rules,
          $prefix: $prefix,
          $custom-property: $custom-property,
          $variant: $variant,
          $variant-separator: $variant-separator,
          $pseudo-separator: $pseudo-separator,
          $pseudo: $variant,
          $important: $important
        );
      }
    }

    @if $responsive {
      @each $breakpoint in map.keys($breakpoints) {
        @include media-queries.media($from: $breakpoint) {
          @if $default {
            @include _colors(
              $set: $set,
              $rules: $rules,
              $prefix: $prefix,
              $custom-property: $custom-property,
              $variant: $breakpoint,
              $variant-separator: $variant-separator,
              $important: $important
            );
          }

          @if $variants-type {
            @each $variant in $variants-list {
              @include _colors(
                $set: $set,
                $rules: $rules,
                $prefix: $prefix,
                $custom-property: $custom-property,
                $variant: #{$breakpoint}#{$variant-separator}#{$variant},
                $variant-separator: $variant-separator,
                $pseudo-separator: $pseudo-separator,
                $pseudo: $variant,
                $important: $important
              );
            }
          }
        }
      }
    }
  }
}
