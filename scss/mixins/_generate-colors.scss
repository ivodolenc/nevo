@use 'sass:list';
@use 'sass:map';
@use 'sass:meta';
@use '../config';
@use '../functions';
@use 'media-queries';

@mixin _colors(
  $selector: '.',
  $color-separator: '-',
  $prefix: null,
  $map: null,
  $class-name: null,
  $property: null,
  $custom-property: null,
  $variant: null,
  $variant-separator: null,
  $pseudo-separator: null,
  $pseudo: null,
  $important: null
) {
  @if map.has-key($map, 'special') {
    $map: map.remove($map, 'special');
  }

  #{$selector}#{$class-name} {
    @each $color-key, $color-value in $map {
      @if meta.type-of($color-value) == 'map' {
        @each $key, $value in $color-value {
          @at-root #{$selector}#{$variant}#{$variant-separator}#{$prefix}#{$class-name}#{$color-separator}#{$color-key}#{$color-separator}#{$key}#{$pseudo-separator}#{$pseudo} {
            #{$custom-property}: #{if($custom-property, 1, null)};
            #{$property}: #{if(
                $custom-property,
                rgba($value, var(#{$custom-property})),
                $value
              )} #{if($important, !important, null)};
          }
        }
      } @else {
        @at-root #{$selector}#{$variant}#{$variant-separator}#{$prefix}#{$class-name}#{$color-separator}#{$color-key}#{$pseudo-separator}#{$pseudo} {
          #{$custom-property}: #{if($custom-property, 1, null)};
          #{$property}: #{if(
              $custom-property,
              rgba($color-value, var(#{$custom-property})),
              $color-value
            )} #{if($important, !important, null)};
        }
      }
    }
  }
}

@mixin generate-colors(
  $prefix: map.get(config.$core, 'prefix'),
  $important: map.get(config.$core, 'important'),
  $variant-separator: map.get(config.$core, 'separator'),
  $breakpoints-map: map.get(config.$theme, 'breakpoints'),
  $map: map.get(config.$theme, 'colors'),
  $pseudo-separator: ':',
  $class-name: null,
  $property: null,
  $custom-property: null,
  $variants: null,
  $pseudo: null,
  $default: true,
  $include: true
) {
  @if $include {
    $responsive: list.index($variants, 'responsive');
    $variants-type: meta.type-of($variants) ==
      'string' or
      meta.type-of($variants) ==
      'list';
    $variants-list: if(
      $responsive,
      functions.remove-value($variants, 'responsive'),
      $variants
    );

    @if $default {
      @include _colors(
        $map: $map,
        $prefix: $prefix,
        $class-name: $class-name,
        $property: $property,
        $custom-property: $custom-property,
        $important: $important
      );
    }

    @if $variants-type {
      @each $variant in $variants-list {
        @include _colors(
          $map: $map,
          $prefix: $prefix,
          $class-name: $class-name,
          $property: $property,
          $custom-property: $custom-property,
          $variant: $variant,
          $variant-separator: $variant-separator,
          $pseudo-separator: $pseudo-separator,
          $pseudo: $variant,
          $important: $important
        );
      }
    }

    @if $responsive {
      @each $breakpoint in map.keys($breakpoints-map) {
        @include media-queries.media($from: $breakpoint) {
          @if $default {
            @include _colors(
              $map: $map,
              $prefix: $prefix,
              $class-name: $class-name,
              $property: $property,
              $custom-property: $custom-property,
              $variant: $breakpoint,
              $variant-separator: $variant-separator,
              $important: $important
            );
          }

          @if $variants-type {
            @each $variant in $variants-list {
              @include _colors(
                $map: $map,
                $prefix: $prefix,
                $class-name: $class-name,
                $property: $property,
                $custom-property: $custom-property,
                $variant: #{$breakpoint}#{$variant-separator}#{$variant},
                $variant-separator: $variant-separator,
                $pseudo-separator: $pseudo-separator,
                $pseudo: $variant,
                $important: $important
              );
            }
          }
        }
      }
    }
  }
}
