@use 'sass:list';
@use 'sass:map';
@use 'sass:meta';
@use '../config';
@use '../functions';
@use 'media-queries';

@mixin _spacing(
  $selector: '.',
  $spacing-separator: '-',
  $prefix: null,
  $map: null,
  $class-name: null,
  $property: null,
  $variant: null,
  $variant-separator: null,
  $pseudo-separator: null,
  $pseudo: null,
  $negative: null,
  $important: null
) {
  $negative-prefix: if($negative, '-', null);

  @each $spacing-key, $spacing-value in $map {
    #{$selector}#{$variant}#{$variant-separator}#{$negative-prefix}#{$prefix}#{$class-name}#{$spacing-separator}#{$spacing-key}#{$pseudo-separator}#{$pseudo} {
      @each $key in $property {
        #{$key}: #{$negative-prefix}#{$spacing-value}
          #{if($important, !important, null)};
      }
    }
  }
}

@mixin generate-spacing(
  $prefix: map.get(config.$core, 'prefix'),
  $important: map.get(config.$core, 'important'),
  $variant-separator: map.get(config.$core, 'separator'),
  $breakpoints-map: map.get(config.$theme, 'breakpoints'),
  $map: map.get(config.$theme, 'spacing'),
  $pseudo-separator: ':',
  $class-name: null,
  $property: null,
  $variants: null,
  $pseudo: null,
  $positive: true,
  $negative: true,
  $include: true
) {
  @if $include {
    $responsive: list.index($variants, 'responsive');
    $variants-type: meta.type-of($variants) ==
      'string' or
      meta.type-of($variants) ==
      'list';
    $variants-list: if(
      $responsive,
      functions.remove-value($variants, 'responsive'),
      $variants
    );

    @if $positive {
      @include _spacing(
        $map: $map,
        $prefix: $prefix,
        $class-name: $class-name,
        $property: $property,
        $important: $important
      );

      @if $variants-type {
        @each $variant in $variants-list {
          @include _spacing(
            $prefix: $prefix,
            $map: $map,
            $class-name: $class-name,
            $property: $property,
            $variant: $variant,
            $variant-separator: $variant-separator,
            $pseudo-separator: $pseudo-separator,
            $pseudo: $variant,
            $important: $important
          );
        }
      }
    }

    @if $negative {
      @include _spacing(
        $map: $map,
        $prefix: $prefix,
        $class-name: $class-name,
        $property: $property,
        $negative: $negative,
        $important: $important
      );

      @if $variants-type {
        @each $variant in $variants-list {
          @include _spacing(
            $map: $map,
            $prefix: $prefix,
            $class-name: $class-name,
            $property: $property,
            $negative: $negative,
            $variant: $variant,
            $variant-separator: $variant-separator,
            $pseudo-separator: $pseudo-separator,
            $pseudo: $variant,
            $important: $important
          );
        }
      }
    }

    @if $responsive {
      @each $breakpoint in map.keys($breakpoints-map) {
        @include media-queries.media($from: $breakpoint) {
          @if $positive {
            @include _spacing(
              $map: $map,
              $prefix: $prefix,
              $class-name: $class-name,
              $property: $property,
              $variant: $breakpoint,
              $variant-separator: $variant-separator,
              $important: $important
            );

            @if $variants-type {
              @each $variant in $variants-list {
                @include _spacing(
                  $map: $map,
                  $prefix: $prefix,
                  $class-name: $class-name,
                  $property: $property,
                  $variant: #{$breakpoint}#{$variant-separator}#{$variant},
                  $variant-separator: $variant-separator,
                  $pseudo-separator: $pseudo-separator,
                  $pseudo: $variant,
                  $important: $important
                );
              }
            }
          }

          @if $negative {
            @include _spacing(
              $map: $map,
              $prefix: $prefix,
              $class-name: $class-name,
              $property: $property,
              $negative: $negative,
              $variant: $breakpoint,
              $variant-separator: $variant-separator,
              $important: $important
            );

            @if $variants-type {
              @each $variant in $variants-list {
                @include _spacing(
                  $map: $map,
                  $prefix: $prefix,
                  $class-name: $class-name,
                  $property: $property,
                  $negative: $negative,
                  $variant: #{$breakpoint}#{$variant-separator}#{$variant},
                  $variant-separator: $variant-separator,
                  $pseudo-separator: $pseudo-separator,
                  $pseudo: $variant,
                  $important: $important
                );
              }
            }
          }
        }
      }
    }
  }
}
